name: build
on:
  workflow_call:
    inputs:
      DOCKERFILE_PATH:
        required: true
        type: string
      APP_NAME:
        required: true
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    if: ${{ github.ref_type != 'tag' }}
    steps:

    - id: slack
      name: Notify build start
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        payload: |
          {
            "attachments": [
              {
                "color": "dbab09",
                "fields": [
              {
                "title": "Build started for ${{ github.workflow }}",
                "short": false,
                "value": "Status: In Progress"
              },
              {
                "value": "${{ github.server_url }}"
                }
              ]
              }
            ]
          }

      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BUILD_UPDATE}}

    - name: Checkout
      uses: actions/checkout@v3

      # Authenticate to Google CLoud
    - id: "auth"
      name: "Authenticate to Google Cloud"
      uses: "google-github-actions/auth@v1"
      if: github.event_name != 'pull_request'
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_CICD }}
        service_account: ${{ secrets.SA_EMAIL_CICD }}
        token_format: "access_token"

    # Docker login to GCP
    - name: Docker login to GCP
      uses: docker/login-action@v2
      if: github.event_name != 'pull_request'
      with:
        registry: europe-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    # Set SHORT SHA
    - run: |
        echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    # Build setup
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Build & Push Docker Container Image to Google Artifact Registry
    - name: Build and push
      uses: docker/build-push-action@v3
      env:
        DOCKER_IMAGE: ${{ secrets.DOCKER_REPO }}/${{ inputs.APP_NAME }}
      with:
        context: .
        push: ${{ github.event_name != 'pull_request'}}
        file: ${{ inputs.DOCKERFILE_PATH }}
        build-args: |
          NUGETPASSWORD=${{ secrets.NUGET_PASSWORD }}
          GHNUGETPASSWORD=${{ secrets.GH_NUGET_PASSWORD }}
        tags: |
          ${{ env.DOCKER_IMAGE }}:${{ env.SHORT_SHA }},
          ${{ env.DOCKER_IMAGE }}:latest

  prod:
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - id: "auth"
      name: "Authenticate to Google Cloud"
      uses: "google-github-actions/auth@v1"
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_CICD }}
        service_account: ${{ secrets.SA_EMAIL_CICD }}
        token_format: "access_token"

    # Set Docker image repo and name as variable
    - run: |
        echo "DOCKER_IMAGE=${{ secrets.DOCKER_REPO }}/${{ inputs.APP_NAME }}" >> $GITHUB_ENV

    # Set semantic tag variable
    - if: ${{ github.ref_type == 'tag' }}
      run: |
        echo "SEM_TAG=${{ github.ref_name }}" >> $GITHUB_ENV

    # Tag latest docker image with semantic tag
    - name: Docker pull, tag & push
      if: ${{ github.ref_type == 'tag' }}
      run: |
        docker pull $DOCKER_IMAGE:latest
        docker image tag $DOCKER_IMAGE:latest $DOCKER_IMAGE:$SEM_TAG
        docker image push $DOCKER_IMAGE:$SEM_TAG